<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>针对 Broadcom NetLink (TM) Gigabit Ethernet 网卡经常性断网终极解决方案</title>
      <link href="/2020/04/10/wangka/"/>
      <url>/2020/04/10/wangka/</url>
      
        <content type="html"><![CDATA[<h2 id="针对-Broadcom-NetLink-TM-Gigabit-Ethernet-网卡经常性断网终极解决方案"><a href="#针对-Broadcom-NetLink-TM-Gigabit-Ethernet-网卡经常性断网终极解决方案" class="headerlink" title="针对 Broadcom NetLink (TM) Gigabit Ethernet 网卡经常性断网终极解决方案"></a>针对 Broadcom NetLink (TM) Gigabit Ethernet 网卡经常性断网终极解决方案</h2><p>相信很多人都会遇到升级到 win10 后经常性断网，时不时就遇见感叹号，头痛的问题，今天把我的解决方案分享出来，希望对同样是宏碁笔记本的兄地有用。</p><p>首先我们去到 Broadcom 官网【<a href="http://www.broadcom.com】，然后如下图一样搜索，下载对应网卡，我是64位所以下载" target="_blank" rel="noopener">www.broadcom.com】，然后如下图一样搜索，下载对应网卡，我是64位所以下载</a> x64。</p><p><img src="https://imgkr.cn-bj.ufileos.com/6890f404-7436-4633-aa81-16b6eca51e67.png" alt=""></p><p>下载完成解压放一边就好了。</p><p>然后，进入到设备管理器，Broadcom NetLink (TM) Gigabit Ethernet 右键点击属性。</p><p><img src="https://imgkr.cn-bj.ufileos.com/d9c99735-86c1-405e-bba6-0cbfca6861d9.png" alt=""></p><p>进入到属性窗口。</p><p><img src="https://imgkr.cn-bj.ufileos.com/9d660dfe-8604-4a3e-9374-43e03308e71e.png" alt=""></p><p>查看版本信息，如果和我一样，这个方法应该对您有用。</p><p><img src="https://imgkr.cn-bj.ufileos.com/26d15410-6402-4cf2-b050-a0626626bb30.png" alt=""></p><p>接下来就是安装更新我们刚刚下载好的网卡驱动了，一步步跟着操作就行。</p><p><img src="https://imgkr.cn-bj.ufileos.com/cce3b894-43cb-4547-b3f5-4ccdd10b7515.png" alt="step 1"></p><p><img src="https://imgkr.cn-bj.ufileos.com/17e223e2-4219-45fb-855c-07b4d6ff9c39.png" alt="step 2"></p><p><img src="https://imgkr.cn-bj.ufileos.com/95c3ec38-a778-444b-bc30-7e2762131712.png" alt="step 3"></p><p><img src="https://imgkr.cn-bj.ufileos.com/f058b628-f308-4a81-9c8e-cff6c714f776.png" alt="step 4"></p><p><img src="https://imgkr.cn-bj.ufileos.com/6c2c66a3-6f2b-430a-af1b-a80889f5428e.png" alt="step 5"></p><p><img src="https://imgkr.cn-bj.ufileos.com/7cf4ab6b-1ed0-409d-ac4e-e5b3de989b26.png" alt="step 6"></p><p><img src="https://imgkr.cn-bj.ufileos.com/87ba8e17-a4d2-4415-b2e9-efe892a65c7f.png" alt="step 7"></p><p>可以看到，已经成功更新了驱动程序，然后进入到驱动程序，可以看到版本已经是 <strong>17.2.0.2</strong> 了。</p><p><img src="https://imgkr.cn-bj.ufileos.com/66154771-11a4-4add-9897-307d382492e3.png" alt=""></p><p><strong>注意，需要重启笔记本才能生效！！</strong></p><p>最后，我们需要修改一下设备安装的默认选项，不然下次 win10 更新您还是可能会遇到同样的问题。</p><p><img src="https://imgkr.cn-bj.ufileos.com/f880ed48-d975-4217-904c-cfb6b195d50c.png" alt="step 1"></p><p><img src="https://imgkr.cn-bj.ufileos.com/3b0fbf08-f70f-4ec7-8be4-03738a52f82e.png" alt="step 2"></p><p>接下来就可以愉快的玩耍了！！！</p><h2 id="Broadcom网卡服务器或主机本地连接网卡参数优化"><a href="#Broadcom网卡服务器或主机本地连接网卡参数优化" class="headerlink" title="Broadcom网卡服务器或主机本地连接网卡参数优化"></a>Broadcom网卡服务器或主机本地连接网卡参数优化</h2><table><thead><tr><th>802.3.az EEE</th><th>Disabled</th></tr></thead><tbody><tr><td>ARP Offload</td><td>Disabled</td></tr><tr><td>Ethernet@WireSpeed</td><td>Disabled</td></tr><tr><td>Flow Control</td><td>Disabled</td></tr><tr><td>Jumbo Mtu</td><td>1500</td></tr><tr><td>Large Send Offload v2 (ipV4)</td><td>Disabled</td></tr><tr><td>Large Send Offload v2 (ipV6)</td><td>Disabled</td></tr><tr><td>Maximum Number of RSS Queue</td><td>RSS 1 Queue</td></tr><tr><td>Priority &amp; VLAN</td><td>Priority Enabled</td></tr><tr><td>LinkSpeed/Duplex</td><td>100Mbps Full Duplex</td></tr><tr><td>TCP/UDP Checksum Offload</td><td>Disabled</td></tr><tr><td>Wake on Magic packet</td><td>Disabled</td></tr><tr><td>Wake on pattern Disabled</td><td>Disabled</td></tr><tr><td>WakeOnLAN From PowerOff Disabled</td><td>Disabled</td></tr><tr><td>WOL Speed</td><td>100Mb</td></tr></tbody></table><h2 id="严格声明"><a href="#严格声明" class="headerlink" title="严格声明"></a>严格声明</h2><p><strong>本项目涉及的代码及一系列分析过程，仅用于学习交流，切勿用于任何非法用途，后果自当。</strong></p><p><strong>未经本人同意，禁止以任何形式，在任何渠道，私自转发或盗文</strong></p><hr><p><strong><span style="color:#35b378;font-weight:bold;">若你是无耻之人，也请带上小弟的文章出处链接地址，抱拳抱拳！！！</span></strong></p><blockquote><p><strong>若要转载请注明出处，尊重他人劳动成果。</strong></p></blockquote><p><strong><span style="color:orangered;font-weight:bold;">转载请注明出处链接 </span>: <span style="color:#0e88eb;font-weight:bold;"><a href="https://hongxin.online/" target="_blank" rel="noopener">https://hongxin.online/</a></span></strong></p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
          <category> win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> win 10 断网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python异步io学习记录</title>
      <link href="/2019/04/27/ascyio/"/>
      <url>/2019/04/27/ascyio/</url>
      
        <content type="html"><![CDATA[<h1 id="Python异步io"><a href="#Python异步io" class="headerlink" title="Python异步io"></a>Python异步io</h1><ol><li>概念与历史</li></ol><p>编程中，我们经常会遇到“并发”这个概念，目的是让软件能充分利用硬件资源，提高性能。并发的方式有多种，多线程，多进程，异步IO等。多线程和多进程更多应用于CPU密集型的场景，比如科学计算的时间都耗费在CPU上，利用多核CPU来分担计算任务。多线程和多进程之间的场景切换和通讯代价很高，不适合IO密集型的场景（关于多线程和多进程的特点已经超出本文讨论的范畴，有兴趣的同学可以自行搜索深入理解）。而异步IO就是非常适合IO密集型的场景，比如网络爬虫和Web服务。</p><p>在计算机程序中，IO就是读写磁盘、读写网络的操作，这种读写速度比读写内存、CPU缓存慢得多，前者的耗时是后者的成千上万倍甚至更多。这就导致，IO密集型的场景99%以上的时间都花费在IO等待的时间上。异步IO就是把CPU从漫长的等待中解放出来的方法。这就可以大大提高我们写的软件系统的并发性。这样的软件，可以是网络爬虫，也可以是Web服务等一切IO密集型的系统。</p><p>异步IO的优势显而易见，各种语言都通过实现这个机制来提高自身的效率，Python也不例外。Python经历了2和3两个大版本的跃迁。这其中也有对异步IO支持的变化历程。</p><p><strong>Python 2的异步IO库</strong></p><p>Python 2 时代官方并没有异步IO的支持，但是有几个第三方库通过事件或事件循环（Event Loop）实现了异步IO，它们是：</p><ul><li>twisted: 是事件驱动的网络库</li><li>gevent: greenlet + libevent(后来是libev或libuv）。通过协程（greenlet）和事件循环库（libev，libuv）实现的gevent使用很广泛。</li><li>tornado: 支持异步IO的web框架。自己实现了IOLOOP。</li></ul><p><strong>Python 3 官方的异步IO</strong></p><p>Python 3.4 加入了asyncio 库，使得Python有了支持异步IO的官方库。这个库，底层是事件循环（EventLoop），上层是协程和任务。asyncio自从3.4 版本加入到最新的 3.7版一直在改进中。</p><p>Python 3.4 刚开始的asyncio的协程还是基于生成器的，通过 yield from 语法实现，可以通过装饰器 @asyncio.coroutine （已过时）装饰一个函数来定义一个协程。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">as_test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"this is a asyncio_test"</span>)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待as_test（）这个协程结束后，阻塞调用run_until_complete（）才返回</span></span><br><span class="line">loop.run_until_complete(as_test())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>Python 3.5 引入了两个新的关键字 await 和 async 用来替换 @asyncio.coroutine 和 yield from ，从语言本身来支持异步IO。从而使得异步编程更加简洁，并和普通的生成器区别开来。</p><p><strong>注意： 对基于生成器的协程的支持已弃用，并计划在 Python 3.10 中移除。所以，写异步IO程序时只需使用 async 和 await 即可。</strong></p><p>Python 3.7 又进行了优化，把API分组为高层级API和低层级API。 我们先看看下面的代码，发现与上面的有什么不同？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hello ...'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'... World!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.7+</span></span><br><span class="line"><span class="comment">#await main()</span></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------RuntimeError                              Traceback (most recent call last)&lt;ipython-input-6-32d3682971b6&gt; in &lt;module&gt;      8 # Python 3.7+      9 #await main()---&gt; 10 asyncio.run(main())~\Anaconda3\lib\asyncio\runners.py in run(main, debug)     32     if events._get_running_loop() is not None:     33         raise RuntimeError(---&gt; 34             &quot;asyncio.run() cannot be called from a running event loop&quot;)     35      36     if not coroutines.iscoroutine(main):RuntimeError: asyncio.run() cannot be called from a running event loop</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hello ...'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'... World!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.7+</span></span><br><span class="line"><span class="keyword">await</span> main()</span><br><span class="line"><span class="comment">#asyncio.run(main())</span></span><br></pre></td></tr></table></figure><pre><code>Hello ...... World!</code></pre><h3 id="上面问题原因"><a href="#上面问题原因" class="headerlink" title="上面问题原因"></a>上面问题原因</h3><p><a href="https://stackoverflow.com/questions/55409641/asyncio-run-cannot-be-called-from-a-running-event-loop" target="_blank" rel="noopener">https://stackoverflow.com/questions/55409641/asyncio-run-cannot-be-called-from-a-running-event-loop</a></p><p>该asyncio.run（）文档说：</p><blockquote><p>当另一个asyncio事件循环在同一个线程中运行时，无法调用此函数。</p></blockquote><p>你的情况的问题是，jupyter（IPython中）已经运行的事件循环（对于IPython的≥7.0）：</p><blockquote><p>您现在可以在IPython终端和笔记本中的顶层使用async / await，它应该 - 在大多数情况下 - “正常工作”。将IPython更新到版本7+，将IPykernel更新到版本5+，然后您即可参加比赛。</p></blockquote><p><strong>这就是为什么你不需要在jupyter中自己启动事件循环而你可以直接调用的原因await main(url)。</strong></p><p><img src="http://yizhixue.net.cn//image-20200427180401724.png&.gif" alt="image-20200427180401724"></p><p>除了用 async 替换 @asyncio.coroutine 和用 await 替换 yield from 外，最大的变化就是关于eventloop的代码不见了，只有一个 async.run()。这就是 3.7 的改进，把eventloop相关的API归入到低层级API，新引进run()作为高层级API让写应用程序的开发者调用，而不用再关心eventloop。除非你要写异步库（比如MySQL异步库）才会和eventloop打交道。</p><p><strong>需要注意的是， asyncio.run() 是3.7版新增加的,(所以Python环境要注意)，</strong>处于暂定API状态。 暂定API，是指被有意排除在标准库的向后兼容性保证之外的应用编程接口。虽然此类接口通常不会再有重大改变，但只要其被标记为暂定，就可能在核心开发者确定有必要的情况下进行向后不兼容的更改（甚至包括移除该接口）。此种更改并不会随意进行 — 仅在 API 被加入之前未考虑到的严重基础性缺陷被发现时才可能会这样做。即便是对暂定 API 来说，向后不兼容的更改也会被视为“最后的解决方案” —— 任何问题被确认时都会尽可能先尝试找到一种向后兼容的解决方案。这种处理过程允许标准库持续不断地演进，不至于被有问题的长期性设计缺陷所困。</p><p>从上面关于 asyncio 的发展来看它一直在变化，3.4，3.5，3.6， 3.7 都有很多细节上的变化。当我看到3.7的run()函数时，也发现一年前基于3.6的asnycio写的爬虫不那么优雅了。</p><p>这种变化，一方面改善了asyncio本身的性能和使用方便程度，但另一方面也增加了我们使用者的学习成本、Python升级带来的改造的成本。如果你以消极的态度抵制这种变化，可以去学习golang，C++来实现你的程序；如果你以积极的态度迎接这种变化，可以更快的掌握这种变化，并优雅 高效的实现你的程序。</p><p>只要你喜欢用Python写程序解决问题，那么就接受并掌握这种变化吧。其实，那种语言不在变，那种技术不在前进。作为程序员，你只有不断地学习和前进。</p><p><strong>uvloop</strong></p><p>uvloop是用Cython写的，基于libuv这个C语言实现的高性能异步I/O库。asyncio自己的事件循环是用Python写的，用uvloop替换asyncio自己的事件循环可以使asyncio的速度更快。并且使用相当简洁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> uvloop</span><br><span class="line"></span><br><span class="line">asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ModuleNotFoundError                       Traceback (most recent call last)&lt;ipython-input-5-f19f880fc357&gt; in &lt;module&gt;      1 import asyncio----&gt; 2 import uvloop      3       4 asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())ModuleNotFoundError: No module named &apos;uvloop&apos;</code></pre><p> <strong>如果Windows安装uvloop会出错：</strong></p><p> uvloop does not support Windows at the moment</p><h1 id="Python的异步IO：API"><a href="#Python的异步IO：API" class="headerlink" title="Python的异步IO：API"></a>Python的异步IO：API</h1><p><a href="https://docs.python.org/zh-cn/3/library/asyncio.html?highlight=asyncio#module-asyncio" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/asyncio.html?highlight=asyncio#module-asyncio</a></p><p>Python的asyncio是使用 async/await 语法编写并发代码的标准库。通过上一部分的讲解，我们了解了它不断变化的发展历史。到了Python最新稳定版 3.7 这个版本，asyncio又做了比较大的调整，<strong>把这个库的API分为了 高层级API和低层级API</strong>，并引入asyncio.run()这样的高级方法，让编写异步程序更加简洁。</p><p>本节希望提纲挈领地介绍最新 3.7 版的asnycio，先从全局认识Python这个异步IO库。</p><p>asyncio的<strong>高层级API</strong>主要提高如下几个方面：</p><ul><li>并发地运行Python协程并完全控制其执行过程；</li><li>执行网络IO和IPC；</li><li>控制子进程；</li><li>通过队列实现分布式任务；</li><li>同步并发代码。</li></ul><p>asyncio的<strong>低层级API</strong>用以支持开发异步库和框架：</p><ul><li>创建和管理事件循环（event loop），提供异步的API用于网络，运行子进程，处理操作系统信号等；</li><li>通过transports实现高效率协议；</li><li>通过async/await 语法桥架基于回调的库和代码。</li></ul><h3 id="asyncio高级API"><a href="#asyncio高级API" class="headerlink" title="asyncio高级API"></a>asyncio高级API</h3><p>高层级API让我们更方便的编写基于asyncio的应用程序。这些API包括：</p><p><strong>（1）协程和任务</strong></p><p>协程通过 async/await 语法进行声明，是编写异步应用的推荐方式。历史的 <code>@asyncio.coroutine</code> 和 <code>yield from</code> 已经被弃用，并计划在Python 3.10中移除。协程可以通过 <code>asyncio.run(coro, *, debug=False)</code> 函数运行，该函数负责管理事件循环并完结异步生成器。它应该被用作asyncio程序的主入口点，相当于main函数，应该只被调用一次。</p><p><strong>任务</strong>被用于并发调度协程，可用于网络爬虫的并发。使用 <code>asyncio.create_task()</code> 就可以把一个协程打包为一个任务，该协程会自动安排为很快运行。</p><p>协程，任务和Future都是可等待对象。其中，Future是低层级的可等待对象，表示一个异步操作的最终结果</p><p><strong>（2）流</strong></p><p>流是用于网络连接的高层级的使用 async/await的原语。流允许在不使用回调或低层级协议和传输的情况下发送和接收数据。异步读写TCP有客户端函数 <code>asyncio.open_connection()</code> 和 服务端函数 <code>asyncio.start_server()</code> 。它还支持 Unix Sockets： <code>asyncio.open_unix_connection()</code> 和 <code>asyncio.start_unix_server()</code>。</p><p><strong>（3）同步原语</strong></p><p>asyncio同步原语的设计类似于threading模块的原语，有两个重要的注意事项：</p><ul><li>asyncio原语不是线程安全的，因此它们不应该用于OS线程同步（而是用threading）</li><li>这些同步原语的方法不接受超时参数; 使用<code>asyncio.wait_for()</code>函数执行超时操作。</li></ul><p>asyncio具有以下基本同步原语：</p><ul><li>Lock</li><li>Event</li><li>Condition</li><li>Semaphore</li><li>BoundedSemaphore</li></ul><p><strong>（4）子进程</strong></p><p>asyncio提供了通过 async/await 创建和管理子进程的API。不同于Python标准库的subprocess，asyncio的子进程函数都是异步的，并且提供了多种工具来处理这些函数，这就很容易并行执行和监视多个子进程。创建子进程的方法主要有两个：</p><ul><li><code>coroutine asyncio.create_subprocess_exec()</code></li><li><code>coroutine asyncio.create_subprocess_shell()</code></li></ul><p><strong>（5）队列</strong></p><p>asyncio 队列的设计类似于标准模块queue的类。虽然asyncio队列不是线程安全的，但它们被设计为专门用于 async/await 代码。需要注意的是，asyncio队列的方法没有超时参数，使用 <code>asyncio.wait_for()</code>函数进行超时的队列操作。</p><p>因为和标注模块queue的类设计相似，使用起来跟queue无太多差异，只需要在对应的函数前面加 await 即可。asyncio 队列提供了三种不同的队列：</p><ul><li>class asyncio.Queue 先进先出队列</li><li>class asyncio.PriorityQueue 优先队列</li><li>class asyncio.LifoQueue 后进先出队列</li></ul><p><strong>（6）异常</strong></p><p>asyncio提供了几种异常，它们是：</p><ul><li>TimeoutError，</li><li>CancelledError，</li><li>InvalidStateError，</li><li>SendfileNotAvailableError</li><li>IncompleteReadError</li><li>LimitOverrunError</li></ul><h3 id="asyncio低级API"><a href="#asyncio低级API" class="headerlink" title="asyncio低级API"></a>asyncio低级API</h3><p>低层级API为编写基于asyncio的库和框架提供支持，有意编写异步库和框架的大牛们需要熟悉这些低层级API。主要包括：</p><p><strong>（1）事件循环</strong></p><p>事件循环是每个asyncio应用程序的核心。 事件循环运行异步任务和回调，执行网络IO操作以及运行子进程。</p><p>应用程序开发人员通常应该使用高级asyncio函数，例如<code>asyncio.run()</code>，并且很少需要引用循环对象或调用其方法。</p><p>Python 3.7 新增了 <code>asyncio.get_running_loop()</code>函数。</p><p><strong>（2）Futures</strong></p><p>Future对象用于将基于低层级回调的代码与高层级的 async/await 代码进行桥接。</p><p>Future表示异步操作的最终结果。 不是线程安全的。</p><p>Future是一个可等待对象。 协程可以等待Future对象，直到它们有结果或异常集，或者直到它们被取消。</p><p>通常，Futures用于启用基于低层级回调的代码（例如，在使用asyncio传输实现的协议中）以与高层级 async/await 代码进行互操作。</p><p><strong>（3）传输和协议（Transports和Protocols）</strong></p><p>Transport 和 Protocol由低层级事件循环使用，比如函数loop.create_connection()。它们使用基于回调的编程风格，并支持网络或IPC协议（如HTTP）的高性能实现。</p><p>在最高级别，传输涉及字节的传输方式，而协议确定要传输哪些字节（在某种程度上何时传输）。</p><p>换种方式说就是：传输是套接字（或类似的I/O端点）的抽象，而协议是从传输的角度来看的应用程序的抽象。</p><p>另一种观点是传输和协议接口共同定义了一个使用网络I/O和进程间I/O的抽象接口。</p><p>传输和协议对象之间始终存在1：1的关系：协议调用传输方法来发送数据，而传输调用协议方法来传递已接收的数据。</p><p>大多数面向连接的事件循环方法（例如<code>loop.create_connection()</code>）通常接受protocol_factory参数，该参数用于为接受的连接创建Protocol对象，由Transport对象表示。 这些方法通常返回（传输，协议）元组。</p><p><strong>（4）策略（Policy）</strong></p><p>事件循环策略是一个全局的按进程划分的对象，用于控制事件循环的管理。 每个事件循环都有一个默认策略，可以使用策略API对其进行更改和自定义。</p><p>策略定义了上下文的概念，并根据上下文管理单独的事件循环。 默认策略将上下文定义为当前线程。</p><p>通过使用自定义事件循环策略，可以自定义<code>get_event_loop()</code>，<code>set_event_loop()</code>和<code>new_event_loop()</code>函数的行为。</p><p><strong>（5）平台支持</strong></p><p>asyncio模块设计为可移植的，但由于平台的底层架构和功能，某些平台存在细微的差异和限制。<strong>在Windows平台，有些是不支持的</strong>，比如 <code>loop.create_unix_connection()</code> and <code>loop.create_unix_server()</code>。而Linux和比较新的macOS全部支持。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Python 3.7 通过对asyncio分组使得它的架构更加清晰，普通写异步IO的应用程序只需熟悉高层级API，需要写异步IO的库和框架时才需要理解低层级的API。</p><h3 id="Python的异步IO编程例子"><a href="#Python的异步IO编程例子" class="headerlink" title="Python的异步IO编程例子"></a>Python的异步IO编程例子</h3><p>本部分我们讲以Python 3.7 + 的asyncio为例讲解如何使用Python的异步IO。</p><p><strong>创建第一个协程</strong></p><p>Python 3.7 推荐使用 async/await 语法来声明协程，来编写异步应用程序。我们来创建第一个协程函数：首先打印一行“你好”，等待1秒钟后再打印“已经创建一个协程”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">build_async</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'你好'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"已经创建一个协程"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># asyncio.run(build_async())</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">再次声明，这只是jupyter的写法，原因在上面解释过了，不能运行会报错</span></span><br><span class="line"><span class="string">正常是上面注释语句 asyncio.run(build_async())</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">await</span>(build_async())</span><br></pre></td></tr></table></figure><pre><code>你好已经创建一个协程</code></pre><p>build_async()函数通过 async 声明为协程函数，较之前的修饰器声明更简洁明了。</p><p>在实践过程中，什么功能的函数要用async声明为协程函数呢？就是那些能发挥异步IO性能的函数，比如读写文件、读写网络、读写数据库，这些都是浪费时间的IO操作，把它们协程化、异步化从而提高程序的整体效率（速度）。</p><p>build_async()函数是通过 <code>asyncio.run()</code>来运行的，而不是直接调用这个函数（协程）。因为，直接调用并不会把它加入调度日程，而只是简单的返回一个协程对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build_async()</span><br></pre></td></tr></table></figure><pre><code>&lt;coroutine object async-def-wrapper.&lt;locals&gt;.build_async at 0x000001EE11AA5348&gt;</code></pre><p>那么，如何真正运行一个协程呢？asyncio 提供了三种机制：</p><p><strong>（1）asyncio.run() 函数</strong>，这是异步程序的主入口，相当于C语言中的main函数。</p><p><strong>（2）用await等待协程</strong>，比如上例中的 await asyncio.sleep(1) 。再看下面的例子，我们定义了协程 async_await_demo() ，在main()协程中调用两次，第一次延迟1秒后打印“你好”，第二次延迟2秒后打印“学习 python 异步协程”。这样我们通过 await 运行了两个协程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_await_demo</span><span class="params">(msg,delay_time)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay_time)</span><br><span class="line">    print(msg)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f"begin at <span class="subst">&#123;time.strftime(<span class="string">'%H:%M:%S'</span>)&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">await</span> async_await_demo(<span class="string">"你好"</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> async_await_demo(<span class="string">"学习 python 异步协程"</span>,<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">f"end at <span class="subst">&#123;time.strftime(<span class="string">'%H:%M:%S'</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># asyncio.run(main())</span></span><br><span class="line"><span class="keyword">await</span>(main())</span><br></pre></td></tr></table></figure><pre><code>begin at 11:24:08你好学习 python 异步协程end at 11:24:11</code></pre><p>从起止时间可以看出，两个协程是顺序执行的，总共耗时1+2(11-8)=3秒。</p><p><strong>Python time strftime() 函数接收以时间元组，并返回以可读字符串表示的当地时间，格式由参数format决定。</strong></p><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/time.html#time.strptime" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/time.html#time.strptime</a></p></blockquote><p><strong>（3）通过 <code>asyncio.create_task()</code> 函数</strong>并发运行作为 asyncio 任务（Task） 的多个协程。下面，我们用create_task()来修改上面的main()协程，从而让两个say_delay()协程并发运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    task1 = asyncio.create_task(async_await_demo(<span class="string">"你好"</span>,<span class="number">1</span>))</span><br><span class="line">    task2 = asyncio.create_task(async_await_demo(<span class="string">"学习 python 异步协程"</span>,<span class="number">2</span>))</span><br><span class="line">    print(<span class="string">f"begin at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line">    print(<span class="string">f"end at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br><span class="line">          </span><br><span class="line"><span class="comment"># asyncio.run(main())</span></span><br><span class="line"><span class="keyword">await</span>(main())</span><br></pre></td></tr></table></figure><pre><code>begin at 11:35:51你好学习 python 异步协程end at 11:35:53</code></pre><p>从运行结果的起止时间可以看出，两个协程是并发执行的了，总耗时等于最大耗时2秒。</p><p><code>asyncio.create_task()</code> 是一个很有用的函数，在爬虫中它可以帮助我们实现大量并发去下载网页。<strong>在Python 3.6中与它对应的是 <code>ensure_future()</code>。</strong></p><p><strong>可等待对象（awaitables）</strong></p><p>可等待对象，就是可以在 await 表达式中使用的对象，前面我们已经接触了两种可等待对象的类型：协程和任务，还有一个是低层级的Future。</p><p>asyncio模块的许多API都需要传入可等待对象，比如 <code>run()</code>, <code>create_task()</code> 等等。</p><p><strong>（1）协程</strong></p><p>协程是可等待对象，可以在其它协程中被等待。协程两个紧密相关的概念是：</p><ul><li>协程函数：通过 async def 定义的函数；</li><li>协程对象：调用协程函数返回的对象。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">whattime</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 直接调用协程函数，返回的是协程对象</span></span><br><span class="line">    co = whattime()</span><br><span class="line">    print(<span class="string">"co is "</span> , type(co))</span><br><span class="line">    </span><br><span class="line">    now = <span class="keyword">await</span> co</span><br><span class="line">    print(<span class="string">f"now is <span class="subst">&#123;now&#125;</span>"</span>)</span><br><span class="line">    </span><br><span class="line">    now2 = <span class="keyword">await</span> whattime()</span><br><span class="line">    print(<span class="string">f"now is <span class="subst">&#123;now2&#125;</span>"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># asyncio.run(main())</span></span><br><span class="line"><span class="keyword">await</span>(main())</span><br></pre></td></tr></table></figure><pre><code>co is  &lt;class &apos;coroutine&apos;&gt;now is 1562643752.6321583now is 1562643752.6331575</code></pre><p>可以看到，直接运行协程函数 whattime()得到的co是一个协程对象，因为协程对象是可等待的，所以通过 await 得到真正的当前时间。now2是直接await 协程函数，也得到了当前时间的返回值。</p><p><strong>（2）任务</strong></p><p>前面我们讲到，任务是用来调度协程的，以便并发执行协程。当一个协程通过 <code>asyncio.create_task()</code> 被打包为一个 任务，该协程将自动加入程序调度日程准备立即运行。</p><p>create_task()的基本使用前面例子已经讲过。它返回的task通过await来等待其运行完。如果，我们不等待，会发生什么？“准备立即运行”又该如何理解呢？先看看下面这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">whattime</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">f'calling:<span class="subst">&#123;i&#125;</span>,now is <span class="subst">&#123;time.strftime(<span class="string">"%X"</span>)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    task = asyncio.create_task(whattime(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">await</span> task</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">          asyncio.create_task(whattime(i))</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">          </span><br><span class="line"><span class="comment"># asyncio.run(main())</span></span><br><span class="line"><span class="keyword">await</span>(main())</span><br></pre></td></tr></table></figure><pre><code>calling:0,now is 12:22:58calling:2,now is 12:22:59calling:4,now is 12:22:59calling:1,now is 12:22:59calling:3,now is 12:22:59</code></pre><p>运行这段代码的情况是这样的：</p><p>首先，1秒钟后打印一行，这是第9，10行代码运行的结果：</p><p><code>calling:0,now is 12:22:58</code></p><p>接着，停顿1秒后，连续打印4行：</p><p><code>calling:2,now is 12:22:59calling:4,now is 12:22:59calling:1,now is 12:22:59calling:3,now is 12:22:59</code></p><p>从这个结果看，<code>asyncio.create_task()</code>产生的4个任务，我们并没有await，它们也执行了。关键在于第14行的 await，如果把这一行去掉或是sleep的时间小于1秒（比whattime()里面的sleep时间少即可），就会只看到第一行的输出结果而看不到后面四行的输出。这是因为，main()不sleep或sleep少于1秒钟，main()就在whattime()还未来得及打印结果（因为，它要sleep 1秒）就退出了，从而整个程序也退出了，就没有whattime()的输出结果。</p><p>再来理解一下<strong>“准备立即执行”</strong>这个说法。它的意思就是，create_task()只是打包了协程并加入调度队列还未执行，并准备立即执行，什么时候执行呢？在“主协程”（调用create_task()的协程）挂起的时候，这里的“挂起”有两个方式：</p><ul><li>一是，通过 await task 来执行这个任务；</li><li>另一个是，主协程通过 await sleep 挂起，事件循环就去执行task了。</li></ul><p>我们知道，asyncio是通过事件循环实现异步的。在主协程 main()里面，没有遇到 await 时，事件就是执行main()函数，遇到 await 时，事件循环就去执行别的协程，即create_task()生成的whattime()的4个任务，这些任务一开始就是 await sleep 1秒。这时候，主协程和4个任务协程都挂起了，CPU空闲，事件循环等待协程的消息。</p><p>如果main()协程只sleep了0.1秒，它就先醒了，给事件循环发消息，事件循环就来继续执行main()协程，而main()后面已经没有代码，就退出该协程，退出它也就意味着整个程序退出，4个任务就没机会打印结果；</p><p>如果main()协程sleep时间多余1秒，那么4个任务先唤醒，就会得到全部的打印结果；</p><p>如果main()的14行sleep等于1秒时，和4个任务的sleep时间相同，也会得到全部打印结果。这是为什么呢？</p><p>我猜想是这样的：4个任务生成在前，第14行的sleep在后，事件循环的消息响应可能有个先进先出的顺序。后面深入asyncio的代码专门研究一下这个猜想正确与否。</p><p><strong>（3）Future</strong></p><p>它是一个低层级的可等待对象，表示一个异步操作的最终结果。目前，我们写应用程序还用不到它，暂不学习。</p><blockquote><p>如果想要学习，可以进入官网查看详细 <a href="https://docs.python.org/zh-cn/3/library/asyncio-future.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/asyncio-future.html</a></p></blockquote><h3 id="asyncio异步IO协程总结"><a href="#asyncio异步IO协程总结" class="headerlink" title="asyncio异步IO协程总结"></a>asyncio异步IO协程总结</h3><p>协程就是我们异步操作的片段。通常，写程序都会把全部功能分成很多不同功能的函数，目的是为了结构清晰；进一步，把那些涉及耗费时间的IO操作（读写文件、数据库、网络）的函数通过 async def 异步化，就是异步编程。</p><p>那些异步函数（协程函数）都是通过消息机制被事件循环管理调度着，整个程序的执行是单线程的，但是某个协程A进行IO时，事件循环就去执行其它协程非IO的代码。当事件循环收到协程A结束IO的消息时，就又回来执行协程A，这样事件循环不断在协程之间转换，充分利用了IO的闲置时间，从而并发的进行多个IO操作，这就是异步IO。</p><p>写异步IO程序时记住一个准则：需要IO的地方异步。其它地方即使用了协程函数也是没用的。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li>Python官方中文文档【<a href="https://docs.python.org/zh-cn/3/library/asyncio.html?highlight=asyncio#module-asyncio】" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/asyncio.html?highlight=asyncio#module-asyncio】</a></li><li>猿人学Python【<a href="https://www.yuanrenxue.com/】" target="_blank" rel="noopener">https://www.yuanrenxue.com/】</a></li></ul><h2 id="严格声明"><a href="#严格声明" class="headerlink" title="严格声明"></a>严格声明</h2><p><strong>本项目涉及的代码及一系列分析过程，仅用于学习交流，切勿用于任何非法用途，后果自当。</strong></p><p><strong>未经本人同意，禁止以任何形式，在任何渠道，私自转发或盗文</strong></p><hr><p><strong><span style="color:#35b378;font-weight:bold;">！！！ 违者必追究 ，后果自负   ！！！</span></strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages访问太慢？通过Netlify免费加速</title>
      <link href="/2018/09/05/hexo-blog-fast/"/>
      <url>/2018/09/05/hexo-blog-fast/</url>
      
        <content type="html"><![CDATA[<p>参考这篇文章：<a href="https://www.cnblogs.com/37Y37/p/12551839.html" target="_blank" rel="noopener">https://www.cnblogs.com/37Y37/p/12551839.html</a></p><p><strong>需要注意的是，要修改dns服务器</strong></p><p><img src="https://imgkr.cn-bj.ufileos.com/5661e7b8-5e9d-472a-932b-700e8105e430.png" alt=""></p><h2 id="严格声明"><a href="#严格声明" class="headerlink" title="严格声明"></a>严格声明</h2><ul><li><p><strong>本项目涉及的代码及一系列分析过程，仅用于学习交流，切勿用于任何非法用途，后果自当。</strong></p></li><li><p><strong>未经本人同意，禁止以任何形式，在任何渠道，私自转发或盗文</strong></p></li></ul><hr><p><strong><span style="color:#35b378;font-weight:bold;">若你是无耻之人，也请带上小弟的文章出处链接地址，抱拳抱拳！！！</span></strong></p><blockquote><p><strong>若要转载请注明出处，尊重他人劳动成果。</strong></p></blockquote><p><strong><span style="color:orangered;font-weight:bold;">转载请注明出处链接 </span>: <span style="color:#0e88eb;font-weight:bold;"><a href="https://hongxin.online" target="_blank" rel="noopener">https://hongxin.online</a></span></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫是什么，如何高效学习爬虫</title>
      <link href="/2018/08/27/spider1/"/>
      <url>/2018/08/27/spider1/</url>
      
        <content type="html"><![CDATA[<p>书籍推荐：才哥的爬虫书和东哥的反爬虫书</p><p>数据爬取难度持续增大，也不完全是坏事，这让企业对爬虫工程师的需求量在逐步增多，薪资待遇也提升了不少。当然，技术要求也越来越高，例如 JavaScript、App 的逆向等几乎已经是爬虫工程师必备的技能，如果不懂，很多网站的数据是难以有效爬取的。另外，爬虫涉及的面很广，对计算机网络、编程基础、前端开发、后端开发、App 开发与逆向、网络安全、数据库、运维、机器学习、数据分析等方向也有一定的要求。</p><p>下面就几个爬虫目前所遇到的痛点来说一下。</p><ul><li><p>比如，JavaScript 逆向。很多网站为了保护数据不被轻易爬取到，会选择在前端进行一些保护，例如，将网站前端的代码进行加密或混淆，从而导致一些接口的请求难以直接用程序来模拟。如果要提高爬取效率，势必要对前端代码进行反混淆，进而进行数据爬取。</p></li><li><p>再比如，App 逆向。移动互联网时代，许多公司会选择将数据放置于 App 端呈现，因此 App 也已经成了数据的重要载体。为了保护数据，企业会在数据接口中加入加密参数。这些加密参数的逻辑是写在 App 之中的，很多情况下，我们必须要对 App 进行逆向，才能分析出其中的逻辑，从而用爬虫进行模拟爬取。</p></li><li><p>还有，爬虫的运维和管理。当爬虫数量较多的时候，如何方便地管理爬虫进程、如何进行定时任务的设置、如何进行扩容、如何进行监控、如何设置科学的报警机制变得非常重要。了解爬虫的运维和管理技巧，爬虫的管理才能不是难事。</p></li><li><p>识别验证码也常遇到。现在很多网站都已经对接了各种各样的验证码，包括拖动、点选验证码等，如果不借助于人工方式识别，利用传统的算法是很难对此类验证码进行识别的。为了提高识别效率，有时候可能需要深度学习对此类验证码进行识别。如果掌握了深度学习的原理并将其应用于爬虫之上，会使你的爬虫技能如虎添翼。</p></li><li><p>最后说一下，网页的智能解析。网页内容的解析在某些业务上是一件非常繁重的工作，现在很多人都会选择直接使用 XPath 等方式来解析，当网站类型变化多样的时候，单纯靠写 XPath 会耗费大量的精力，如果能有一种准确率较高的网页智能解析算法，那么网页的解析就会变得更加简单。</p></li><li><p>还有很多，这里就不一一列举了。</p></li></ul><h2 id="严格声明"><a href="#严格声明" class="headerlink" title="严格声明"></a>严格声明</h2><p><strong>本项目涉及的代码及一系列分析过程，仅用于学习交流，切勿用于任何非法用途，后果自当。</strong></p><p><strong>未经本人同意，禁止以任何形式，在任何渠道，私自转发或盗文</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-blog 基于 Gitee 搭建的博客</title>
      <link href="/2018/08/17/hexo-blog/"/>
      <url>/2018/08/17/hexo-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>Git</li><li>Node.js <ul><li><strong><span style="color:#35b378;font-weight:bold;">最新的 Node.js 已经集成了 npm</span></strong></li></ul></li><li>npm</li></ul><blockquote><p><strong>官网地址：</strong></p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></li></ul></blockquote><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="1-安装-Hexo"><a href="#1-安装-Hexo" class="headerlink" title="1. 安装 Hexo"></a>1. 安装 Hexo</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">-g</span> <span class="selector-tag">hexo</span> # 通过<span class="selector-tag">npm</span>安装<span class="selector-tag">hexo</span></span><br><span class="line"># <span class="selector-tag">-g</span> 指定全局安装，可以使用<span class="selector-tag">hexo</span>命令</span><br></pre></td></tr></table></figure><h3 id="2-初始化-Hexo"><a href="#2-初始化-Hexo" class="headerlink" title="2. 初始化 Hexo"></a>2. 初始化 Hexo</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">init</span> <span class="selector-tag">blog</span># 初始化创建，会再桌面创建<span class="selector-tag">blog</span>文件夹</span><br><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">blog</span># 进入<span class="selector-tag">blog</span>目录</span><br><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span># 进一步安装<span class="selector-tag">hexo</span>所需文件</span><br></pre></td></tr></table></figure><p>初始化后，文件夹的目录如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="selector-class">.deploy</span>       #需要部署的文件</span><br><span class="line">├── <span class="selector-tag">node_modules</span>  <span class="selector-id">#Hexo</span>插件</span><br><span class="line">├── <span class="selector-tag">public</span>        #生成的静态网页文件</span><br><span class="line">├── <span class="selector-tag">scaffolds</span>     #模板</span><br><span class="line">├── <span class="selector-tag">source</span>        #博客正文和其他源文件等都应该放在这里</span><br><span class="line">|   ├── _drafts   #草稿</span><br><span class="line">|   └── _posts    #文章</span><br><span class="line">├── <span class="selector-tag">themes</span>        #主题</span><br><span class="line">├── _<span class="selector-tag">config</span><span class="selector-class">.yml</span>   #全局配置文件</span><br><span class="line">└── <span class="selector-tag">package</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure><h3 id="3-启动-Hexo"><a href="#3-启动-Hexo" class="headerlink" title="3. 启动 Hexo"></a>3. 启动 Hexo</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean# 清除所有记录 /hexo c</span><br><span class="line">hexo generate# 生成静态网页 /hexo g</span><br><span class="line">hexo server   # 启动服务 /hexo s</span><br></pre></td></tr></table></figure><p>显示如下图，则运行成功。</p><p><img src="https://imgkr.cn-bj.ufileos.com/886a853c-7c50-4b12-9e7c-06682c09a122.png" alt=""></p><p>然后使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p><img src="https://imgkr.cn-bj.ufileos.com/f49507b3-2d19-4472-beb6-7cb8754f0443.png" alt=""></p><p>其实，如果你要求不高，我们再把它部署到码云（gitee）上，现在也可以说是完成了。</p><h3 id="4-把博客部署到码云上"><a href="#4-把博客部署到码云上" class="headerlink" title="4. 把博客部署到码云上"></a>4. 把博客部署到码云上</h3><blockquote><p>首先说明一下，为什么选择码云，因为我也是通过 GitHub Page 实现的，不过最近 GitHub 经常性蹦，访问也比较慢，所以我就选择了码云实现一下，<strong>当然你有服务器就最好不过了</strong>。</p></blockquote><p>码云（gitee）：<strong><a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></strong></p><h4 id="4-1-注册码云，创建仓库"><a href="#4-1-注册码云，创建仓库" class="headerlink" title="4.1 注册码云，创建仓库"></a>4.1 注册码云，创建仓库</h4><p>我们需要在 gitee 创建自己的账户（<strong>如果没有</strong>），然后再创建一个自己仓库</p><p><img src="https://imgkr.cn-bj.ufileos.com/af2cef0a-0b91-46f6-9c2a-4683a18b4032.png" alt=""></p><p>输入仓库名称，其它默认即可，<strong>这里因为我已经创建了</strong>。<br><img src="https://imgkr.cn-bj.ufileos.com/6e66ab5a-1c91-4a50-b693-83b7b6e5526e.png" alt=""></p><h4 id="4-2-生成-添加-SSH-公钥"><a href="#4-2-生成-添加-SSH-公钥" class="headerlink" title="4.2 生成/添加 SSH 公钥"></a>4.2 生成/添加 SSH 公钥</h4><p>码云 Gitee 、GitHub 提供了基于 SSH 协议的 Git 服务，在使用 SSH 协议访问仓库仓库之前，需要先配置好账户/仓库的 SSH 公钥。</p><p><strong>配置 ssh 账户和邮箱</strong></p><p>邮箱不必与 GitHub、Gitee 账号相同，个人邮箱即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">config</span> <span class="selector-tag">--global</span> <span class="selector-tag">user</span><span class="selector-class">.email</span> *********<span class="keyword">@qq</span>.com# 设置邮箱</span><br><span class="line">git config --global user.name <span class="string">'****'</span># 设置用户名</span><br></pre></td></tr></table></figure><p>查看账户和邮箱</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">config</span> <span class="selector-tag">--global</span> <span class="selector-tag">user</span><span class="selector-class">.name</span> </span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">config</span> <span class="selector-tag">--global</span> <span class="selector-tag">user</span><span class="selector-class">.email</span></span><br></pre></td></tr></table></figure><p><strong>本地生成ssh公钥</strong></p><p>邮箱为刚配置好的账户邮箱</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> "<span class="selector-tag">xxxxx</span><span class="keyword">@xxxxx</span>.com"</span><br></pre></td></tr></table></figure><p>按照提示完成三次回车，即可生成 ssh key</p><p><img src="https://imgkr.cn-bj.ufileos.com/8c530f13-9af5-449b-9e9e-6cc750261f37.png" alt=""></p><p><strong>查看 ssh 公钥</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"># 退出</span><br><span class="line"><span class="selector-pseudo">:qa</span>!</span><br></pre></td></tr></table></figure><p>复制公钥去 Gitee 粘贴，添加<br><img src="https://imgkr.cn-bj.ufileos.com/4216e7a6-6100-4638-a63c-64c917d0c444.png" alt=""></p><blockquote><p>说明一下：</p><ul><li><strong>GitHub、gitlab、码云三个平台可以使用一个公钥</strong></li></ul></blockquote><p><strong>测试是否连接成功</strong></p><p>码云 Gitee</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span><span class="keyword">@gitee</span>.com</span><br></pre></td></tr></table></figure><p>如下图所示，则表示连接成功<br><img src="https://imgkr.cn-bj.ufileos.com/8e671f4b-01b2-457e-89f4-3be91ffbad34.png" alt=""></p><p><strong>另外， GitHub 的测试代码如下:</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span><span class="keyword">@github</span>.com</span><br><span class="line">  </span><br><span class="line"># 表示连接成功</span><br><span class="line">Hi “您的用户名”! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h4 id="4-3-配置连接-Gitee"><a href="#4-3-配置连接-Gitee" class="headerlink" title="4.3 配置连接 Gitee"></a>4.3 配置连接 Gitee</h4><p>进入到我们新创建的仓库，复制项目地址</p><p><img src="https://imgkr.cn-bj.ufileos.com/58184ecf-7b9b-4c60-8582-69563e653e05.png" alt=""></p><p>复制 URL ，到 hexo 的配置文件 <code>_config.yml</code>，相应位置修改成如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">deploy</span>:</span><br><span class="line">  <span class="selector-tag">type</span>: <span class="selector-tag">git</span>                   # <span class="selector-tag">type</span>为<span class="selector-tag">git</span></span><br><span class="line">  repo: git@gitee.com:XXXXXX/blog.git # 仓库的 URL</span><br><span class="line">  <span class="selector-tag">branch</span>: <span class="selector-tag">master</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：冒号后面一定要有空格，否则不能正确识别。</strong></p></blockquote><h4 id="4-4-部署博客"><a href="#4-4-部署博客" class="headerlink" title="4.4 部署博客"></a>4.4 部署博客</h4><p>安装自动部署发布工具，不然部署会报错</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">hexo-deployer-git</span> <span class="selector-tag">--save</span></span><br></pre></td></tr></table></figure><p>新建 deployer.sh 文件，输入代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">clean</span></span><br><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">g</span> </span><br><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">d</span></span><br></pre></td></tr></table></figure><p>一键部署博客</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sh</span> <span class="selector-tag">deployer</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure><h3 id="5-Gitee-Pages-设置"><a href="#5-Gitee-Pages-设置" class="headerlink" title="5. Gitee Pages 设置"></a>5. Gitee Pages 设置</h3><p>在项目的服务中选择 Pages 选项</p><p><img src="https://imgkr.cn-bj.ufileos.com/5944ddc0-3c68-4d5d-86dc-da3d29b4cbb6.png" alt=""></p><p>默认配置，点击启动即可</p><p><img src="https://imgkr.cn-bj.ufileos.com/d983ed3a-f2e9-4207-8cc6-39ab5564282c.png" alt=""></p><p>下图则成功开启，记住博客地址，之后可以点更新进行操作</p><p><img src="https://imgkr.cn-bj.ufileos.com/1c1b49ba-5d4b-46aa-8835-5cff8091c120.png" alt=""></p><p><strong>博客发布成功之后，可以访问博客地址：xxxxxx，就可通过他提供的博客地址进行访问，预览在线博客啦！！</strong></p><p>如果博客的样式不对，则需要在_config.yml中配置下博客地址和路径：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">url</span>: “码云提供给您的博客地址”</span><br><span class="line">root: /</span><br></pre></td></tr></table></figure><p>再执行命令 <code>sh deployer.sh</code> 就可以啦，之后就是美化我们的博客了。</p><h3 id="6-主题配置"><a href="#6-主题配置" class="headerlink" title="6. 主题配置"></a>6. 主题配置</h3><p>下载自己喜欢的主题，可以去 github 下载压缩包然后<strong>放到博客项目根目录下的 themes 中</strong>。</p><p>然后配置 <strong>_config.yml</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">theme</span>: “您的主题文件夹完整名称”</span><br><span class="line"># 这里需要注意:后面要有一个空格，名称要和<span class="selector-tag">theme</span>下的主题目录名称相同。</span><br></pre></td></tr></table></figure><p>修改完成，本地运行 <code>hexo s</code> 测试成功即可上传部署到 Gitee 然后点击更新即可。</p><h3 id="7-自定义域名"><a href="#7-自定义域名" class="headerlink" title="7. 自定义域名"></a>7. 自定义域名</h3><p>经过上面操作，我们用 Hexo 搭建好自己的 Blog 后，我选择了托管在码云上,现在通过 <a href="https://xx0817.gitee.io/blog">https://xx0817.gitee.io/blog</a> 这个地址就可以访问了。但是我想通过自己的域名进行访问，要实现这个功能。</p><h4 id="7-1-购买域名"><a href="#7-1-购买域名" class="headerlink" title="7.1 购买域名"></a>7.1 购买域名</h4><p>这里不多说，某里云、某讯云、某为云都可以，看自己喜欢。</p><h4 id="7-2-域名解析"><a href="#7-2-域名解析" class="headerlink" title="7.2 域名解析"></a>7.2 域名解析</h4><p>我们需要通过 GitHub 网址 ping 出服务器的 IP 地址。可以在本地 cmd 中 ping。也可以在网站上 ping。</p><p>我选择网站 ping。</p><p>网站：<strong><a href="http://ip.tool.chinaz.com/" target="_blank" rel="noopener">http://ip.tool.chinaz.com/</a></strong></p><p>访问后输入自己的 GitHub 部署的博客网址就能 ping 出来了。</p><p><img src="https://imgkr.cn-bj.ufileos.com/64102110-6c58-442b-b84f-31f6049cc755.png" alt=""></p><p>进入域名购买的控制台，在解析中添加记录：</p><p><img src="https://imgkr.cn-bj.ufileos.com/3fac4c75-c146-4258-8080-02856321ff7d.png" alt=""></p><p>添加记录：</p><p>主机记录为@，记录类型为A，解析线路选择默认，记录值设置为上面ping出来的IP地址。最少要设置一个，我是四个全部设置了。</p><p><img src="https://imgkr.cn-bj.ufileos.com/9f0ab269-17ce-4c40-afc2-4bfca90cf410.png" alt=""></p><p>再添加记录：</p><p>主机记录为www，记录类型为 CNAME，解析线路选择默认，记录值为你的 GitHub 域名，我的为 gdfuturexx.github.io。</p><p><img src="https://imgkr.cn-bj.ufileos.com/a0a33911-a735-4fbd-8a2f-8a3bdbb05321.png" alt=""></p><p>上面设置的意思为：</p><ul><li>设置 A 记录的意思是，当我输入 hongxin.online 这个域名的时候，访问的是 185.199.110.153等这4个IP地址其中一个；</li><li>设置 CNAME 的意思是，当我访问 gdfuturexx.github.io 这个地址的时候，会跳转到 hongxin.online，之后的过程就和 A 记录相同了，即访问 185.199.110.153等4个IP地址其中一个。</li></ul><h4 id="7-3-添加CNAME文件"><a href="#7-3-添加CNAME文件" class="headerlink" title="7.3 添加CNAME文件"></a>7.3 添加CNAME文件</h4><p>在Hexo本地文件夹的source文件夹中，增加一个名为CNAME的无后缀文件。</p><p>如果你想地址栏中显示www就输入<a href="http://www.xxx.com，否则输入xxxx.com（你的域名）就行。" target="_blank" rel="noopener">www.xxx.com，否则输入xxxx.com（你的域名）就行。</a></p><p>之后重新部署即可。</p><h4 id="7-4-GitHub-Pages-绑定域名"><a href="#7-4-GitHub-Pages-绑定域名" class="headerlink" title="7.4 GitHub Pages 绑定域名"></a>7.4 GitHub Pages 绑定域名</h4><p>登录你的GitHub，进入仓库，打开设置。</p><p>找到下图位置，在 Custom domain 添加你的自定义域名。</p><p>之后刷新一下页面，如果 能勾选Enforce HTTPS就要勾选上。如果不勾选的话访问域名会显示不安全。</p><p><img src="https://imgkr.cn-bj.ufileos.com/cfe512a5-d535-422b-af76-addb6701a3e5.png" alt=""></p><blockquote><p>自定义域名这段参考了：<strong>sushan102.top</strong>，这个网站中的文章</p></blockquote><h2 id="严格声明"><a href="#严格声明" class="headerlink" title="严格声明"></a>严格声明</h2><ul><li><p><strong>本项目涉及的代码及一系列分析过程，仅用于学习交流，切勿用于任何非法用途，后果自当。</strong></p></li><li><p><strong>未经本人同意，禁止以任何形式，在任何渠道，私自转发或盗文</strong></p></li></ul><hr><p><strong><span style="color:#35b378;font-weight:bold;">若你是无耻之人，也请带上小弟的文章出处链接地址，抱拳抱拳！！！</span></strong></p><blockquote><p><strong>若要转载请注明出处，尊重他人劳动成果。</strong></p></blockquote><p><strong><span style="color:orangered;font-weight:bold;">转载请注明出处链接 </span>: <span style="color:#0e88eb;font-weight:bold;"><a href="https://hongxin.online" target="_blank" rel="noopener">https://hongxin.online</a></span></strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
